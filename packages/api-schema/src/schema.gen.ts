/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/': {
    /** Reassures curious engineers who browse to the Backend URL that the server is up and running. */
    get: operations['misc_index']
  }
  '/@/:team/:suite': {
    /** Reassures curious engineers who browse to the API URL provided for submitting results that the platform is up and running. */
    get: operations['misc_placeholder']
  }
  '/auth/activate/:key': {
    /** Activate a user account. */
    post: operations['account_verifyActivate']
  }
  '/auth/extend': {
    /** Extend this user session. */
    post: operations['account_sessionExtend']
  }
  '/auth/reset': {
    /** Initiate the process to reset account password. */
    post: operations['account_resetKeyCreate']
  }
  '/auth/reset/:key': {
    /** Provides basic information for an account associated with a given reset key. */
    get: operations['account_resetKeyCheck']
    /** Set a new password for a user account using a previously issued reset key. */
    post: operations['account_resetKeyApply']
  }
  '/auth/reset/resend': {
    /** Resend password reset key. */
    post: operations['account_resetKeyResend']
  }
  '/auth/signin': {
    /** Log into a user account. Creates a user session. */
    post: operations['account_signin']
  }
  '/auth/signin/google': {
    /** Log into a user account. Creates a user session. */
    post: operations['account_signin_google']
  }
  '/auth/signout': {
    /** Log out of a user account. Removes a user session. */
    post: operations['account_signout']
  }
  '/auth/signup': {
    /** Create a user account. */
    post: operations['account_signup']
  }
  '/auth/signup/resend': {
    /** Resend account activation key. */
    post: operations['account_verifyResend']
  }
  '/batch/:team/:suite': {
    /** List all batches in a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
    get: operations['batch_list']
  }
  '/batch/:team/:suite/:batch': {
    /** Learn more about a batch in a given suite. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
    get: operations['batch_lookup']
    /** Remove a batch and all data associated with it. User initiating the request must be authenticated. User initiating the request must be administrator of the team. Batch must be sealed. Batch must not be baseline of the suite it belongs to. */
    delete: operations['batch_remove']
  }
  '/batch/:team/:suite/:batch/compare/:dstBatch/:dstSuite': {
    /** Compare a batch with another batch. Compare results submitted for a batch to results submitted for another batch. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['batch_compare']
  }
  '/batch/:team/:suite/:batch/export/pdf': {
    /** Generate PDF report for test results submitted to this batch. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['batch_export_pdf']
  }
  '/batch/:team/:suite/:batch/export/zip': {
    /** Export test results submitted to this batch as a compressed archive. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['batch_export_zip']
  }
  '/batch/:team/:suite/:batch/promote': {
    /** Promote a batch to baseline of the suite it belongs to. User initiating the request must be authenticated. User initiating the request must be member of the team. Batch to be promoted should be sealed. Batch to be promoted should not be empty. We support empty promotion reason only for the first submitted batch whose workflow does not include calling this route. hence, we choose to reject empty reasons for all subsequent promotions that happened through this route. We think a valid promotion reason should be no longer than a single paragraph. Assuming a normal paragraph includes 200 words with average length of 5, we allow at most 1500 characters to be entered for promotion reason. */
    post: operations['batch_promote']
  }
  '/batch/:team/:suite/:batch/seal': {
    /** Seals a version of the specified suite to prevent additional results to be submitted for that version. This is rarely necessary given that batches are automatically sealed by the backend after a period of time after their submission. User initiating the request must be authenticated. User initiating the request must be member of the team. */
    post: operations['batch_seal']
  }
  '/client/element/:team/:suite': {
    /** List all test suites in baseline version of a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
    get: operations['client_elements']
  }
  '/client/signin': {
    /** Authenticate to Touca Server API. Creates a temporary client session. */
    post: operations['client_signin']
  }
  '/client/submit': {
    /** Handles test results submitted via Touca SDKs. Client initiating the request must be authenticated. */
    post: operations['client_submit']
  }
  '/cmp': {
    /** List pending comparison jobs. Designed for use by the comparator service. */
    get: operations['comparison_list']
  }
  '/cmp/job/:job': {
    /** Submit results for a comparison job. Designed for use by the comparator service. */
    patch: operations['comparison_process']
  }
  '/cmp/message/{message}': {
    /** Submit parsed json representation of a message. Designed for use by the comparator service. */
    patch: operations['message_process']
  }
  '/cmp/stats': {
    /** Submit comparator statistics. Designed for use by the comparator service. */
    post: operations['comparison_stats']
  }
  '/comment/:team/:suite/:batch/c': {
    /** List comments submitted for a given page. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['comment_list']
    /** Creates a new comment. User performing the query must be authenticated. User performing the query must be member of the team. */
    post: operations['comment_create']
  }
  '/comment/:team/:suite/:batch/c/:comment': {
    /** Removes an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. User performing the request must be owner of the comment or admin of the team or admin of the platform. */
    delete: operations['comment_remove']
    /** Updates an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. User performing the request must own the comment. */
    patch: operations['comment_update']
  }
  '/comment/:team/:suite/:batch/c/:comment/reply': {
    /** Replies to an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. */
    post: operations['comment_reply']
  }
  '/element/:team/:suite/:element': {
    /** Learn more about an element in a given suite. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
    get: operations['element_lookup']
    /** Update test case information in a given suite. User initiating the request must be authenticated. User initiation the request must be member of the team. */
    patch: operations['element_update']
  }
  '/element/:team/:suite/:element/compare/:batch/:dstBatch/:dstElement/:dstSuite': {
    /** Compare results submitted for the same element between two batches. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
    get: operations['element_compare']
  }
  '/element/v2/:team/:suite': {
    /** List all test suites in baseline version of a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
    get: operations['element_list']
  }
  '/feedback': {
    /** Submits user feedback to Touca Engineering Team. */
    post: operations['other_feedback']
  }
  '/platform': {
    /** Provides health status of the Touca server */
    get: operations['platform_health']
  }
  '/platform/account/:account': {
    /** Updates profile of an existing account on the platform. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
    patch: operations['platform_accountUpdate']
  }
  '/platform/account/:account/delete': {
    /** Deletes a given account and all data associated with it. User initiating the request must be authenticated. User initiating the request must be a platform admin. User being removed must not have any active team membership. User being removed must not have any pending team invitation. User being removed must not have any pending join request. */
    post: operations['platform_accountDelete']
  }
  '/platform/account/:account/populate': {
    /** Populates an existing account with sample test results. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
    post: operations['platform_accountPopulate']
  }
  '/platform/account/:account/suspend': {
    /** Suspends a given account and removes all its active sessions. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
    post: operations['platform_accountSuspend']
  }
  '/platform/config': {
    /** Reports server settings. If server is already configured, user initiating the request must be authenticated and a server admin. */
    get: operations['platform_config']
    /** Updates server settings. If server is already configured, user initiating the request must be authenticated and a server admin. */
    patch: operations['platform_update']
  }
  '/platform/install': {
    /** Adds contact information to this server instance. */
    post: operations['platform_install']
  }
  '/platform/stats': {
    /** Provides statistics about this Touca server instance. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
    get: operations['platform_stats']
  }
  '/suite/:team': {
    /** Lists all the suites registered for a given team. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
    get: operations['suite_list']
    /** Create a new suite in a given team. User initiating the request must be authenticated. User initiating the request must be a member of the team. */
    post: operations['suite_create']
  }
  '/suite/:team/:suite': {
    /** Learn more about a suite in a given team. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['suite_lookup']
    /** Removes a suite and all data associated with it. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
    delete: operations['suite_remove']
    /** Update suite information in a given team. User initiating the request must be authenticated. User initiation the request must be member of the team. */
    patch: operations['team_suite']
  }
  '/suite/:team/:suite/subscribe': {
    /** Subscribe to a suite in a given team. User initiating the request must be authenticated. User initiating the request must be member of the team. */
    patch: operations['suite_subscribe']
  }
  '/team': {
    /** Lists all the teams of which user is a member. User performing the query must be authenticated. */
    get: operations['team_list']
    /** Create a new team owned by this user. User initiating the request must be authenticated. */
    post: operations['team_create']
  }
  '/team/:team': {
    /** Learn more about a team. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['team_lookup']
    /** Removes a team and all data associated with it. User initiating the request must be authenticated. User initiating the request must be owner of the team. */
    delete: operations['team_remove']
    /** Update team information. User initiating the request must be authenticated. User initiation the request must be owner of the team. */
    patch: operations['team_update']
  }
  '/team/:team/invite': {
    /** Invite someone to join a team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
    post: operations['team_inviteAdd']
  }
  '/team/:team/invite/accept': {
    /** Adds user to the team they are invited to. User initiating the request must be authenticated. User initiating the request must be invited to the team. */
    post: operations['team_inviteAccept']
  }
  '/team/:team/invite/decline': {
    /** Removes team membership invitation for this user. User initiating the request must be authenticated. User initiating the request must be invited to the team. */
    post: operations['team_inviteDecline']
  }
  '/team/:team/invite/rescind': {
    /** Rescind invitation to a team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
    post: operations['team_inviteRescind']
  }
  '/team/:team/join': {
    /** Request to join a team. User initiating the request must be authenticated. User initiating the request must not be a member of the team. */
    post: operations['team_joinAdd']
    /** Rescind request to join a team. User initiating the request must be authenticated. User initiating the request must not be a member of the team. User initiating the request must have a pending join request. */
    delete: operations['team_joinRescind']
  }
  '/team/:team/join/:account': {
    /** Accept user request to join the team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. User holding the account must have a pending join request. */
    post: operations['team_joinAccept']
  }
  '/team/:team/join/decline': {
    /** Decline user request to join the team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. User holding the account must have a pending join request. */
    post: operations['team_joinDecline']
  }
  '/team/:team/leave': {
    /** Cancel membership of a given team. User initiating the request must be authenticated. User initiating the request must be member of the team. */
    post: operations['team_leave']
  }
  '/team/:team/member': {
    /** Lists all members of a team. Information provided for each member includes their roles within this team. Also provides list of users currently invited to join this team. User performing the query must be authenticated. User performing the query must be member of the team. */
    get: operations['team_memberList']
  }
  '/team/:team/member/:account': {
    /** Adds an existing user to a team. User initiating the request must be authenticated. User initiating the request must be administrator of the platform. */
    post: operations['team_memberAdd']
  }
  '/team/:team/member/:member': {
    /** Removes an existing member from a team. User initiating the request must be authenticated. User initiating the request must be a team administrator. User to be updated must be a team member. */
    delete: operations['team_memberRemove']
    /** Updates role of an existing member in a team. User initiating the request must be authenticated. User initiating the request must be a team administrator. User to be updated must be a team member. */
    patch: operations['team_memberUpdate']
  }
  '/user': {
    /** Provides non-sensitive account information about the user performing this query. User performing the query must be authenticated. */
    get: operations['user_lookup']
    /** Removes user's account and all data associated with it. User initiating the request must be authenticated. User initiating the request must not be the platform owner. User must not have any active team membership. User must not have any pending team invitation. User must not have any pending join request. */
    delete: operations['user_delete']
    /** Updates user information. User initiating the request must be authenticated. */
    patch: operations['user_update']
  }
  '/user/inbox': {
    /** Lists recent notifications for this user. User initiating the request must be authenticated. */
    get: operations['user_inboxList']
  }
  '/user/inbox/seen': {
    /** Marks all notifications for this user as seen. User initiating the request must be authenticated. */
    post: operations['user_inboxSeen']
  }
  '/user/sessions': {
    /** Provides list of active sessions of this user. User performing the query must be authenticated. */
    get: operations['user_sessions']
  }
  '/user/sessions/:id': {
    /** Expires a given user session for this user. User performing the query must be authenticated. */
    delete: operations['user_sessionsDelete']
  }
}

export type components = {
  schemas: {
    CT_BatchCompareOverview: {
      /** Format: int32 */
      elementsCountDifferent?: number
      /** Format: int32 */
      elementsCountFresh?: number
      /** Format: int32 */
      elementsCountHead?: number
      /** Format: int32 */
      elementsCountMissing?: number
      /** Format: int32 */
      elementsCountPending?: number
      /** Format: float */
      elementsScoreAbsolute?: number
      /** Format: float */
      elementsScoreAggregate?: number
      /** Format: int32 */
      metricsDurationChange?: number
      /** Format: int32 */
      metricsDurationHead?: number
      /** Format: int32 */
      metricsDurationSign?: number
    }
    CT_BatchComparisonItem: {
      /** Format: date-time */
      builtAt: Date
      elementName: string
    }
    CT_BatchComparisonItemCommon: {
      dst: components['schemas']['CT_BatchComparisonItem']
      meta?: components['schemas']['CT_CppTestcaseComparisonOverview']
      src: components['schemas']['CT_BatchComparisonItem']
    }
    CT_BatchComparisonItemSolo: components['schemas']['CT_BatchComparisonItem'] & {
      meta?: components['schemas']['CT_CppTestcaseOverview']
    }
    CT_BatchComparisonResponse: {
      common: components['schemas']['CT_BatchComparisonItemCommon'][]
      fresh: components['schemas']['CT_BatchComparisonItemSolo'][]
      missing: components['schemas']['CT_BatchComparisonItemSolo'][]
      overview?: components['schemas']['CT_BatchCompareOverview']
    }
    CT_BatchItem: components['schemas']['CT_BatchItemRaw'] & {
      meta: components['schemas']['CT_BatchCompareOverview']
    }
    CT_BatchItemRaw: {
      batchSlug: string
      comparedAgainst: string
      expirable: boolean
      isSealed: boolean
      messageCount: number
      /** Format: date-time */
      submittedAt: Date
      submittedBy: components['schemas']['CT_Userinfo'][]
      /** Format: date-time */
      updatedAt: Date
    }
    CT_BatchListResponse: components['schemas']['CT_BatchItem'][]
    CT_BatchLookupResponse: components['schemas']['CT_BatchItem'] &
      ({
        commentCount: number
        suiteName: string
        suiteSlug: string
        teamName: string
        teamSlug: string
      } & {
        meta: unknown
      })
    CT_CommentItem: {
      /** Format: date-time */
      at: Date
      by: components['schemas']['CT_Userinfo']
      /** Format: date-time */
      editedAt?: Date
      id: string
      replies: components['schemas']['CT_CommentItem'][]
      text: string
    }
    CT_CommentListResponse: components['schemas']['CT_CommentItem'][]
    CT_CppCellar: {
      commonKeys: components['schemas']['CT_CppTypeComparison'][]
      missingKeys: components['schemas']['CT_CppTypeComparison'][]
      newKeys: components['schemas']['CT_CppTypeComparison'][]
    }
    CT_CppTestcaseComparison: {
      assertions: components['schemas']['CT_CppCellar']
      dst: components['schemas']['CT_CppTestcaseMetadata']
      metrics: components['schemas']['CT_CppCellar']
      results: components['schemas']['CT_CppCellar']
      src: components['schemas']['CT_CppTestcaseMetadata']
    }
    CT_CppTestcaseComparisonOverview: {
      /** Format: int32 */
      keysCountCommon?: number
      /** Format: int32 */
      keysCountFresh?: number
      /** Format: int32 */
      keysCountMissing?: number
      /** Format: float */
      keysScore?: number
      /** Format: int32 */
      metricsCountCommon?: number
      /** Format: int32 */
      metricsCountFresh?: number
      /** Format: int32 */
      metricsCountMissing?: number
      /** Format: int32 */
      metricsDurationCommonDst?: number
      /** Format: int32 */
      metricsDurationCommonSrc?: number
    }
    CT_CppTestcaseMetadata: {
      /** Format: date-time */
      builtAt: Date
      teamSlug: string
      testcase: string
      testsuite: string
      version: string
    }
    CT_CppTestcaseOverview: {
      keysCount?: number
      metricsCount?: number
      metricsDuration?: number
    }
    CT_CppTypeComparison: {
      desc?: string[]
      dstType?: string
      dstValue?: string
      name: string
      /** Format: float */
      score?: number
      srcType?: string
      srcValue?: string
    }
    /** @enum {string} */
    CT_EFeatureFlag: 'newsletter_product' | 'newsletter_changelog'
    /** @enum {string} */
    CT_ENotificationType: 'none' | 'different' | 'all'
    /** @enum {string} */
    CT_EPlatformRole: 'guest' | 'user' | 'admin' | 'owner' | 'super'
    /** @enum {string} */
    CT_ETeamRole:
      | 'unknown'
      | 'applicant'
      | 'invited'
      | 'member'
      | 'admin'
      | 'owner'
    CT_ElementComparisonItem: components['schemas']['CT_BatchComparisonItem'] & {
      /** Format: date-time */
      submittedAt: Date
      submittedBy: components['schemas']['CT_Userinfo']
    }
    CT_ElementComparisonResponse: {
      cmp?: components['schemas']['CT_CppTestcaseComparison']
      dst: components['schemas']['CT_ElementComparisonItem']
      meta?: components['schemas']['CT_CppTestcaseComparisonOverview']
      src: components['schemas']['CT_ElementComparisonItem']
    }
    CT_ElementListResponse: components['schemas']['CT_ElementListResponseItem'][]
    CT_ElementListResponseItem: {
      metricsDuration: number
      name: string
      note?: string
      slug: string
      tags?: string[]
      versions?: {
        match?: number
        name?: string
        time?: number
      }[]
    }
    CT_ElementLookupResponse: {
      batches: {
        slug?: string
        /** Format: date-time */
        submittedAt?: Date
        /** Format: date-time */
        updatedAt?: Date
      }[]
      elementName: string
      elementSlug: string
      suiteName: string
      suiteSlug: string
      teamName: string
      teamSlug: string
    }
    CT_NotificationItem: {
      /** Format: date-time */
      createdAt: Date
      /** Format: date-time */
      seenAt?: Date
      text: string
    }
    CT_NotificationListResponse: components['schemas']['CT_NotificationItem'][]
    CT_PlatformConfig: {
      contact?: {
        company?: string
        email?: string
        name?: string
      }
      mail?: {
        host?: string
        pass?: string
        port?: string
        user?: string
      }
    }
    CT_PlatformStatsResponse: {
      /** Format: float */
      cmpAvgCollectionTime: number
      /** Format: float */
      cmpAvgProcessingTime: number
      /** Format: int32 */
      countBatches: number
      /** Format: int32 */
      countComparisons: number
      /** Format: int32 */
      countElements: number
      /** Format: int32 */
      countMessages: number
      /** Format: int32 */
      spaceFree: number
      /** Format: int32 */
      spaceSize: number
      /** Format: float */
      spaceUsed: number
      users: components['schemas']['CT_PlatformStatsUser'][]
    }
    CT_PlatformStatsUser: {
      activationLink?: string
      /** Format: date-time */
      createdAt: Date
      /** Format: email */
      email?: string
      fullname?: string
      /** Format: date-time */
      lockedAt?: Date
      resetKeyLink?: string
      /** Format: date-time */
      resetKeyCreatedAt?: Date
      /** Format: date-time */
      resetKeyExpiresAt?: Date
      role: components['schemas']['CT_ETeamRole']
      suspended?: boolean
      username: string
    } & {
      teams: unknown
    }
    CT_PlatformStatus: {
      configured: boolean
      mail: boolean
      ready: boolean
    }
    CT_Promotion: {
      /** Format: date-time */
      at: Date
      by: components['schemas']['CT_Userinfo']
      for: string
      from: string
      to: string
    }
    CT_SuiteItem: {
      baseline?: components['schemas']['CT_BatchItemRaw']
      batchCount: number
      latest?: components['schemas']['CT_BatchItemRaw']
      overview?: components['schemas']['CT_BatchCompareOverview']
      suiteName: string
      suiteSlug: string
    }
    CT_SuiteListResponse: components['schemas']['CT_SuiteItem'][]
    CT_SuiteLookupResponse: components['schemas']['CT_SuiteItem'] & {
      batches: string[]
      promotions: components['schemas']['CT_Promotion'][]
      retainFor: number
      sealAfter: number
      subscription: components['schemas']['CT_ENotificationType']
      teamName: string
      teamSlug: string
    }
    CT_TeamApplicant: {
      /** Format: email */
      email: string
      fullname: string
      username: string
    }
    CT_TeamInvitee: {
      /** Format: email */
      email: string
      fullname?: string
      /** Format: date-time */
      invitedAt: Date
    }
    CT_TeamItem: {
      name: string
      role: components['schemas']['CT_ETeamRole']
      slug: string
    }
    CT_TeamListResponse: components['schemas']['CT_TeamItem'][]
    CT_TeamLookupResponse: components['schemas']['CT_TeamItem'] & {
      userCount: number
    }
    CT_TeamMember: {
      username: string
      fullname: string
      role: components['schemas']['CT_ETeamRole']
    }
    CT_TeamMemberListResponse: {
      applicants?: components['schemas']['CT_TeamApplicant'][]
      invitees: components['schemas']['CT_TeamInvitee'][]
      members: components['schemas']['CT_TeamMember'][]
    }
    CT_UserLookupResponse: {
      apiKeys: string[]
      /** Format: email */
      email: string
      feature_flags: string[]
      fullname: string
      platformRole: components['schemas']['CT_EPlatformRole']
      user_hash?: string
      user_id?: string
      username: string
    }
    CT_UserSessionsResponseItem: {
      _id: string
      agent: string
      /** Format: date-time */
      expiresAt: Date
      ipAddr: string
    }
    CT_Userinfo: {
      fullname: string
      username: string
    }
    Errors: {
      /**
       * @example [
       *   "error message"
       * ]
       */
      errors: string[]
    }
    /** @example 5ed4609a6fc689752b000000 */
    ObjectId: string
    Unknown: { [key: string]: unknown }
  }
  responses: {
    /** Unauthorized */
    Unauthorized: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** Forbidden */
    Forbidden: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** Request Invalid */
    RequestInvalid: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** User Not Found */
    UserNotFound: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** Team Not Found */
    TeamNotFound: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** Member Not Found */
    MemberNotFound: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
    /** Suite Not Found */
    SuiteNotFound: {
      content: {
        'application/json': components['schemas']['Errors']
      }
    }
  }
  parameters: {
    /** @description username of account to be updated */
    user: string
    /** @description username of member to be updated */
    member: string
    /** @description username of account to be updated */
    account: string
    /** @description slug of this team */
    team: string
    /** @description slug of this suite */
    suite: string
    /** @description version of the workflow */
    batch: string
    /** @description testcase to be given as input to the workflow under test */
    element: string
    /** @description slug of the suite to compare against */
    dstSuite: string
    /** @description version to compare against */
    dstBatch: string
    /** @description slug of the element in the suite to compare against */
    dstElement: string
    /** @description unique id of this comment */
    comment: string
    /** @description reset key provided by the platform */
    resetKey: string
    /** @description unique identifier for this comparison job */
    job: components['schemas']['ObjectId']
    /** @description unique id of this session */
    session_id: string
  }
  headers: {
    /** the url to redirect a page to */
    Location?: string
  }
}

export type operations = {
  /** Reassures curious engineers who browse to the Backend URL that the server is up and running. */
  misc_index: {
    responses: {
      /** Path to route that provides server health status */
      302: never
    }
  }
  /** Reassures curious engineers who browse to the API URL provided for submitting results that the platform is up and running. */
  misc_placeholder: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** Path to the Documentations Page served by Web App */
      308: never
    }
  }
  /** Activate a user account. */
  account_verifyActivate: {
    responses: {
      /** Account Activated */
      200: {
        content: {
          'application/json': {
            /** Format: date-time */
            expiresAt?: Date
          }
        }
      }
      400: components['responses']['RequestInvalid']
      /** Activation Key Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          key: string
        }
      }
    }
  }
  /** Extend this user session. */
  account_sessionExtend: {
    responses: {
      /** User Session Extended */
      200: {
        content: {
          'application/json': {
            /** Format: date-time */
            expiresAt?: Date
          }
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
    }
  }
  /** Initiate the process to reset account password. */
  account_resetKeyCreate: {
    responses: {
      /** Password Reset Key Generated */
      204: never
      400: components['responses']['RequestInvalid']
      /** Account Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Account Locked or Suspended */
      423: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: email */
          email: string
        }
      }
    }
  }
  /** Provides basic information for an account associated with a given reset key. */
  account_resetKeyCheck: {
    parameters: {
      path: {
        /** reset key provided by the platform */
        key: components['parameters']['resetKey']
      }
    }
    responses: {
      /** Basic Account Information */
      200: {
        content: {
          'application/json': {
            email: string
            fullname: string
            username: string
          }
        }
      }
      400: components['responses']['RequestInvalid']
    }
  }
  /** Set a new password for a user account using a previously issued reset key. */
  account_resetKeyApply: {
    parameters: {
      path: {
        /** reset key provided by the platform */
        key: components['parameters']['resetKey']
      }
    }
    responses: {
      /** Account Password was Reset */
      204: never
      400: components['responses']['RequestInvalid']
      /** Reset Key Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Resend password reset key. */
  account_resetKeyResend: {
    responses: {
      /** Password Reset Key Resent */
      204: never
      400: components['responses']['RequestInvalid']
      /** Account Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: email */
          email: string
        }
      }
    }
  }
  /** Log into a user account. Creates a user session. */
  account_signin: {
    responses: {
      /** Session Created */
      200: {
        content: {
          'application/json': {
            /** Format: date-time */
            expiresAt?: Date
          }
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      /** Account Locked or Suspended */
      423: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          password: string
          username: string
        }
      }
    }
  }
  /** Log into a user account. Creates a user session. */
  account_signin_google: {
    responses: {
      /** Session Created */
      200: {
        content: {
          'application/json': {
            /** Format: date-time */
            expiresAt?: Date
          }
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      /** Account Locked or Suspended */
      423: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          google_token: string
        }
      }
    }
  }
  /** Log out of a user account. Removes a user session. */
  account_signout: {
    responses: {
      /** User Session Removed */
      204: never
      400: components['responses']['RequestInvalid']
      /** Session Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Create a user account. */
  account_signup: {
    responses: {
      /** Account Created */
      201: unknown
      400: components['responses']['RequestInvalid']
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: email */
          email: string
        }
      }
    }
  }
  /** Resend account activation key. */
  account_verifyResend: {
    responses: {
      /** Activation Link Resent */
      204: never
      400: components['responses']['RequestInvalid']
      /** Account Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: email */
          email: string
        }
      }
    }
  }
  /** List all batches in a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
  batch_list: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** List of Batches */
      200: {
        content: {
          'application/json': components['schemas']['CT_BatchListResponse'][]
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Learn more about a batch in a given suite. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
  batch_lookup: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Detailed information about this batch. */
      200: {
        content: {
          'application/json': components['schemas']['CT_BatchLookupResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Remove a batch and all data associated with it. User initiating the request must be authenticated. User initiating the request must be administrator of the team. Batch must be sealed. Batch must not be baseline of the suite it belongs to. */
  batch_remove: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Batch Scheduled for Removal */
      202: unknown
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Compare a batch with another batch. Compare results submitted for a batch to results submitted for another batch. User performing the query must be authenticated. User performing the query must be member of the team. */
  batch_compare: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
        /** version to compare against */
        dstBatch: components['parameters']['dstBatch']
        /** slug of the suite to compare against */
        dstSuite: components['parameters']['dstSuite']
      }
    }
    responses: {
      /** Comparison Results */
      200: {
        content: {
          'application/json': components['schemas']['CT_BatchComparisonResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Failed to perform comparison */
      503: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Generate PDF report for test results submitted to this batch. User performing the query must be authenticated. User performing the query must be member of the team. */
  batch_export_pdf: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** PDF Report */
      200: {
        content: {
          'application/pdf': string
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Export test results submitted to this batch as a compressed archive. User performing the query must be authenticated. User performing the query must be member of the team. */
  batch_export_zip: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Generate Results */
      200: {
        content: {
          'application/zip': string
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Promote a batch to baseline of the suite it belongs to. User initiating the request must be authenticated. User initiating the request must be member of the team. Batch to be promoted should be sealed. Batch to be promoted should not be empty. We support empty promotion reason only for the first submitted batch whose workflow does not include calling this route. hence, we choose to reject empty reasons for all subsequent promotions that happened through this route. We think a valid promotion reason should be no longer than a single paragraph. Assuming a normal paragraph includes 200 words with average length of 5, we allow at most 1500 characters to be entered for promotion reason. */
  batch_promote: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Batch Promoted */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
  }
  /** Seals a version of the specified suite to prevent additional results to be submitted for that version. This is rarely necessary given that batches are automatically sealed by the backend after a period of time after their submission. User initiating the request must be authenticated. User initiating the request must be member of the team. */
  batch_seal: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Batch Sealed */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** List all test suites in baseline version of a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
  client_elements: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** List of Test Cases */
      200: {
        content: {
          'application/json': components['schemas']['CT_ElementListResponse']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Authenticate to Touca Server API. Creates a temporary client session. */
  client_signin: {
    responses: {
      /** Client Session Created */
      200: {
        content: {
          'application/json': {
            /** Format: date-time */
            expiresAt?: Date
          }
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      /** Account Locked or Suspended */
      423: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: uuid */
          key: string
        }
      }
    }
  }
  /** Handles test results submitted via Touca SDKs. Client initiating the request must be authenticated. */
  client_submit: {
    responses: {
      /** Results Submitted */
      204: never
      /** Results do not conform to Touca flatbuffers Schema. Or platform rejects processing the results for other reasons. */
      400: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    /** Valid binary data that conforms to Touca flatbuffers schema. Submission file cannot be larger than 50 MB in size. */
    requestBody: {
      content: {
        'application/octet-stream': string
      }
    }
  }
  /** List pending comparison jobs. Designed for use by the comparator service. */
  comparison_list: {
    responses: {
      /** List of comparison jobs. */
      200: {
        content: {
          'application/json': {
            _id: components['schemas']['ObjectId']
            dstBatch: components['schemas']['ObjectId']
            dstMessage: components['schemas']['ObjectId']
            dstProcessed: boolean
            srcBatch: components['schemas']['ObjectId']
            srcMessage: components['schemas']['ObjectId']
            srcProcessed: boolean
          }[]
        }
      }
    }
  }
  /** Submit results for a comparison job. Designed for use by the comparator service. */
  comparison_process: {
    parameters: {
      path: {
        /** unique identifier for this comparison job */
        job: components['parameters']['job']
      }
    }
    responses: {
      /** Comparison Result Submitted */
      204: never
      /** Job Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Job Already Processed */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Comparison Result Too Large */
      413: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          overview: components['schemas']['CT_CppTestcaseOverview']
          body: components['schemas']['Unknown']
        }
      }
    }
  }
  /** Submit parsed json representation of a message. Designed for use by the comparator service. */
  message_process: {
    parameters: {
      path: {
        /** unique identifier for this message */
        message: components['schemas']['ObjectId']
      }
    }
    responses: {
      /** Message Result Submitted */
      204: never
      /** Message Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Message Already Processed */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Message Result Too Large */
      413: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          overview: components['schemas']['CT_CppTestcaseComparisonOverview']
          body: components['schemas']['Unknown']
        }
      }
    }
  }
  /** Submit comparator statistics. Designed for use by the comparator service. */
  comparison_stats: {
    responses: {
      /** Comparator Statistics Submitted */
      204: never
    }
    requestBody: {
      content: {
        'application/json': {
          avgCollectionTime?: number
          avgProcessingTime?: number
          numCollectionJobs?: number
          numProcessingJobs?: number
        }
      }
    }
  }
  /** List comments submitted for a given page. User performing the query must be authenticated. User performing the query must be member of the team. */
  comment_list: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** List of Comments */
      200: {
        content: {
          'application/json': components['schemas']['CT_CommentListResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Creates a new comment. User performing the query must be authenticated. User performing the query must be member of the team. */
  comment_create: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
      }
    }
    responses: {
      /** Comment created */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          body: string
        }
      }
    }
  }
  /** Removes an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. User performing the request must be owner of the comment or admin of the team or admin of the platform. */
  comment_remove: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
        /** unique id of this comment */
        comment: components['parameters']['comment']
      }
    }
    responses: {
      /** Comment removed */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Updates an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. User performing the request must own the comment. */
  comment_update: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
        /** unique id of this comment */
        comment: components['parameters']['comment']
      }
    }
    responses: {
      /** Comment updated */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          body: string
        }
      }
    }
  }
  /** Replies to an existing comment. User performing the request must be authenticated. User performing the request must be member of the team. */
  comment_reply: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** version of the workflow */
        batch: components['parameters']['batch']
        /** unique id of this comment */
        comment: components['parameters']['comment']
      }
    }
    responses: {
      /** Comment reply submitted */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Learn more about an element in a given suite. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
  element_lookup: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** testcase to be given as input to the workflow under test */
        element: components['parameters']['element']
      }
    }
    responses: {
      /** Detailed information about this element. */
      200: {
        content: {
          'application/json': components['schemas']['CT_ElementLookupResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Element Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Update test case information in a given suite. User initiating the request must be authenticated. User initiation the request must be member of the team. */
  element_update: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** testcase to be given as input to the workflow under test */
        element: components['parameters']['element']
      }
    }
    responses: {
      /** Metadata of the suite was updated. */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Element Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          note?: string
        }
      }
    }
  }
  /** Compare results submitted for the same element between two batches. User performing the query must be authenticated. User performing the query must be member of the team. Output may have been cached in the server. */
  element_compare: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
        /** testcase to be given as input to the workflow under test */
        element: components['parameters']['element']
        /** version of the workflow */
        batch: components['parameters']['batch']
        /** version to compare against */
        dstBatch: components['parameters']['dstBatch']
        /** slug of the element in the suite to compare against */
        dstElementName: components['parameters']['dstElement']
        /** slug of the suite to compare against */
        dstSuite: components['parameters']['dstSuite']
      }
    }
    responses: {
      /** Comparison Results */
      200: {
        content: {
          'application/json': components['schemas']['CT_ElementComparisonResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite or Element or Batch Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** Failed to Perform Comparison */
      503: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** List all test suites in baseline version of a given suite. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
  element_list: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** List of Test Cases */
      200: {
        content: {
          'application/json': components['schemas']['CT_ElementListResponse']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Submits user feedback to Touca Engineering Team. */
  other_feedback: {
    responses: {
      /** Feedback Delivered */
      204: never
      400: components['responses']['RequestInvalid']
    }
    requestBody: {
      content: {
        'application/json': {
          body: string
          name?: string
          page: string
          email?: string
          cname?: string
        }
      }
    }
  }
  /** Provides health status of the Touca server */
  platform_health: {
    responses: {
      /** Indicates whether the platform is ready to accept submissions. */
      200: {
        content: {
          'application/json': components['schemas']['CT_PlatformStatus']
        }
      }
    }
  }
  /** Updates profile of an existing account on the platform. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
  platform_accountUpdate: {
    parameters: {
      path: {
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** Account Profile Updated */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** User Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          role: 'user' | 'admin'
        }
      }
    }
  }
  /** Deletes a given account and all data associated with it. User initiating the request must be authenticated. User initiating the request must be a platform admin. User being removed must not have any active team membership. User being removed must not have any pending team invitation. User being removed must not have any pending join request. */
  platform_accountDelete: {
    responses: {
      /** Account Deleted */
      204: never
      401: components['responses']['Unauthorized']
      /** Account cannot be deleted */
      403: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Populates an existing account with sample test results. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
  platform_accountPopulate: {
    parameters: {
      path: {
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** Sample data added */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** User Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Suspends a given account and removes all its active sessions. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
  platform_accountSuspend: {
    parameters: {
      path: {
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** Account suspended. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** User Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Reports server settings. If server is already configured, user initiating the request must be authenticated and a server admin. */
  platform_config: {
    responses: {
      /** Server settings */
      200: {
        content: {
          'application/json': components['schemas']['CT_PlatformConfig']
        }
      }
    }
  }
  /** Updates server settings. If server is already configured, user initiating the request must be authenticated and a server admin. */
  platform_update: {
    responses: {
      /** Server settings was updated. */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
    }
    requestBody: {
      content: {
        'application/json': {
          telemetry?: boolean
        }
      }
    }
  }
  /** Adds contact information to this server instance. */
  platform_install: {
    responses: {
      /** Server registered */
      204: never
      400: components['responses']['RequestInvalid']
      403: components['responses']['Forbidden']
    }
    requestBody: {
      content: {
        'application/json': {
          company?: string
          email: string
          name: string
        }
      }
    }
  }
  /** Provides statistics about this Touca server instance. User initiating the request must be authenticated. User initiating the request must be a platform admin. */
  platform_stats: {
    responses: {
      /** Statistics about this platform instance. */
      200: {
        content: {
          'application/json': components['schemas']['CT_PlatformStatsResponse']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
    }
  }
  /** Lists all the suites registered for a given team. User performing the query must be authenticated. User performing the query must be a member of the team. Output may have been cached in the server. */
  suite_list: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** List of Suites */
      200: {
        content: {
          'application/json': components['schemas']['CT_SuiteListResponse'][]
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Create a new suite in a given team. User initiating the request must be authenticated. User initiating the request must be a member of the team. */
  suite_create: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Suite Created */
      201: unknown
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** Suite Already Registered */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          slug: string
        }
      }
    }
  }
  /** Learn more about a suite in a given team. User performing the query must be authenticated. User performing the query must be member of the team. */
  suite_lookup: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** Detailed information about this suite */
      200: {
        content: {
          'application/json': components['schemas']['CT_SuiteLookupResponse']
        }
      }
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Removes a suite and all data associated with it. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
  suite_remove: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** Suite Scheduled for Removal */
      202: unknown
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Update suite information in a given team. User initiating the request must be authenticated. User initiation the request must be member of the team. */
  team_suite: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** Metadata of the suite was updated. Suite is now known by a new slug. */
      201: unknown
      /** Metadata of the suite was updated. Suite slug has not changed. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team Not Found or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          name?: string
          slug?: string
          retainFor?: number
        }
      }
    }
  }
  /** Subscribe to a suite in a given team. User initiating the request must be authenticated. User initiating the request must be member of the team. */
  suite_subscribe: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** slug of this suite */
        suite: components['parameters']['suite']
      }
    }
    responses: {
      /** User Subscribed to Suite */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team Not Found or Suite Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          level?: components['schemas']['CT_ENotificationType']
        }
      }
    }
  }
  /** Lists all the teams of which user is a member. User performing the query must be authenticated. */
  team_list: {
    responses: {
      /** List of Teams */
      200: {
        content: {
          'application/json': components['schemas']['CT_TeamListResponse']
        }
      }
      401: components['responses']['Unauthorized']
    }
  }
  /** Create a new team owned by this user. User initiating the request must be authenticated. */
  team_create: {
    responses: {
      /** Team Created */
      201: unknown
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      /** Team Already Registered */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          slug: string
        }
      }
    }
  }
  /** Learn more about a team. User performing the query must be authenticated. User performing the query must be member of the team. */
  team_lookup: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Detailed information about this team, excluding the list of members and their roles within this team. */
      200: {
        content: {
          'application/json': components['schemas']['CT_TeamLookupResponse']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Removes a team and all data associated with it. User initiating the request must be authenticated. User initiating the request must be owner of the team. */
  team_remove: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Team Removed */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Update team information. User initiating the request must be authenticated. User initiation the request must be owner of the team. */
  team_update: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Metadata of the team was updated. Team is now known by a new slug. */
      201: unknown
      /** Metadata of the team was updated. Team slug has not changed. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** Message Already Processed */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          name?: string
          slug?: string
        }
      }
    }
  }
  /** Invite someone to join a team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
  team_inviteAdd: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** User Invited to Team */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** User is already a member */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** User was last invited less than 10 minutes ago */
      429: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: email
           * @example alice@example.com
           */
          email: string
          /** @example Alice Anderson */
          fullname: string
        }
      }
    }
  }
  /** Adds user to the team they are invited to. User initiating the request must be authenticated. User initiating the request must be invited to the team. */
  team_inviteAccept: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** User was added as a member. */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Removes team membership invitation for this user. User initiating the request must be authenticated. User initiating the request must be invited to the team. */
  team_inviteDecline: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Team Invitation was Declined. */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Rescind invitation to a team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. */
  team_inviteRescind: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** User Invited to Team */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team Not Found or user was not on invitation list. */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: email
           * @example alice@example.com
           */
          email: string
        }
      }
    }
  }
  /** Request to join a team. User initiating the request must be authenticated. User initiating the request must not be a member of the team. */
  team_joinAdd: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Request was submitted. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** User is already a member or has a pending request. */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Rescind request to join a team. User initiating the request must be authenticated. User initiating the request must not be a member of the team. User initiating the request must have a pending join request. */
  team_joinRescind: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** User rescinded request to join the team. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team Not Found or user did not have a pending join request. */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
      /** User is already a member or has a pending request. */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Accept user request to join the team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. User holding the account must have a pending join request. */
  team_joinAccept: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** User request to join the team was accepted. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** User is already a member or has no pending request. */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Decline user request to join the team. User initiating the request must be authenticated. User initiating the request must be administrator of the team. User holding the account must have a pending join request. */
  team_joinDecline: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** User request to join the team was declined. */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
      /** User is already a member or has no pending request. */
      409: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Cancel membership of a given team. User initiating the request must be authenticated. User initiating the request must be member of the team. */
  team_leave: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** Membership Cancelled */
      204: never
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Lists all members of a team. Information provided for each member includes their roles within this team. Also provides list of users currently invited to join this team. User performing the query must be authenticated. User performing the query must be member of the team. */
  team_memberList: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
      }
    }
    responses: {
      /** List of Team Members */
      200: {
        content: {
          'application/json': components['schemas']['CT_TeamMemberListResponse']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      404: components['responses']['TeamNotFound']
    }
  }
  /** Adds an existing user to a team. User initiating the request must be authenticated. User initiating the request must be administrator of the platform. */
  team_memberAdd: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** username of account to be updated */
        account: components['parameters']['account']
      }
    }
    responses: {
      /** User Added to Team */
      201: unknown
      400: components['responses']['RequestInvalid']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or User Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Removes an existing member from a team. User initiating the request must be authenticated. User initiating the request must be a team administrator. User to be updated must be a team member. */
  team_memberRemove: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** username of member to be updated */
        member: components['parameters']['member']
      }
    }
    responses: {
      /** Member Removed */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Member Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Updates role of an existing member in a team. User initiating the request must be authenticated. User initiating the request must be a team administrator. User to be updated must be a team member. */
  team_memberUpdate: {
    parameters: {
      path: {
        /** slug of this team */
        team: components['parameters']['team']
        /** username of member to be updated */
        member: components['parameters']['member']
      }
    }
    responses: {
      /** Member Role Updated */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Team or Member Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          role: 'member' | 'admin'
        }
      }
    }
  }
  /** Provides non-sensitive account information about the user performing this query. User performing the query must be authenticated. */
  user_lookup: {
    responses: {
      /** Basic Account Information */
      200: {
        content: {
          'application/json': components['schemas']['CT_UserLookupResponse']
        }
      }
      401: components['responses']['Unauthorized']
    }
  }
  /** Removes user's account and all data associated with it. User initiating the request must be authenticated. User initiating the request must not be the platform owner. User must not have any active team membership. User must not have any pending team invitation. User must not have any pending join request. */
  user_delete: {
    responses: {
      /** Account Deleted */
      204: never
      401: components['responses']['Unauthorized']
      /** Account cannot be deleted */
      403: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
  /** Updates user information. User initiating the request must be authenticated. */
  user_update: {
    responses: {
      /** User information was updated. */
      204: never
      401: components['responses']['Unauthorized']
    }
    requestBody: {
      content: {
        'application/json': {
          fullname?: string
          username?: string
          password?: string
        }
      }
    }
  }
  /** Lists recent notifications for this user. User initiating the request must be authenticated. */
  user_inboxList: {
    responses: {
      /** Notifications Marked as Seen */
      200: {
        content: {
          'application/json': components['schemas']['CT_NotificationListResponse']
        }
      }
      401: components['responses']['Unauthorized']
    }
  }
  /** Marks all notifications for this user as seen. User initiating the request must be authenticated. */
  user_inboxSeen: {
    responses: {
      /** Notifications Marked as Seen */
      204: never
      401: components['responses']['Unauthorized']
    }
  }
  /** Provides list of active sessions of this user. User performing the query must be authenticated. */
  user_sessions: {
    responses: {
      /** Active User Sessions */
      200: {
        content: {
          'application/json': components['schemas']['CT_UserSessionsResponseItem']
        }
      }
      401: components['responses']['Unauthorized']
    }
  }
  /** Expires a given user session for this user. User performing the query must be authenticated. */
  user_sessionsDelete: {
    parameters: {
      path: {
        /** unique id of this session */
        session_id: components['parameters']['session_id']
      }
    }
    responses: {
      /** Expired active session */
      204: never
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      /** Session Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Errors']
        }
      }
    }
  }
}

export type external = {}
