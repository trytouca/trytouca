// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { DoubleRule, DoubleRuleT } from './double-rule'

export class Double {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Double {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsDouble(bb: flatbuffers.ByteBuffer, obj?: Double): Double {
    return (obj || new Double()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsDouble(
    bb: flatbuffers.ByteBuffer,
    obj?: Double
  ): Double {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Double()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  value(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0
  }

  rule(obj?: DoubleRule): DoubleRule | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? (obj || new DoubleRule()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null
  }

  static startDouble(builder: flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addValue(builder: flatbuffers.Builder, value: number) {
    builder.addFieldFloat64(0, value, 0.0)
  }

  static addRule(builder: flatbuffers.Builder, ruleOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, ruleOffset, 0)
  }

  static endDouble(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  unpack(): DoubleT {
    return new DoubleT(
      this.value(),
      this.rule() !== null ? this.rule()!.unpack() : null
    )
  }

  unpackTo(_o: DoubleT): void {
    _o.value = this.value()
    _o.rule = this.rule() !== null ? this.rule()!.unpack() : null
  }
}

export class DoubleT {
  constructor(
    public value: number = 0.0,
    public rule: DoubleRuleT | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const rule = this.rule !== null ? this.rule!.pack(builder) : 0

    Double.startDouble(builder)
    Double.addValue(builder, this.value)
    Double.addRule(builder, rule)

    return Double.endDouble(builder)
  }
}
