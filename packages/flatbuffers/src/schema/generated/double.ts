// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Double {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Double {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDouble(bb: flatbuffers.ByteBuffer, obj?: Double): Double {
    return (obj || new Double()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsDouble(
    bb: flatbuffers.ByteBuffer,
    obj?: Double
  ): Double {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Double()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  value(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  static startDouble(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addValue(builder: flatbuffers.Builder, value: number) {
    builder.addFieldFloat64(0, value, 0.0);
  }

  static endDouble(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDouble(
    builder: flatbuffers.Builder,
    value: number
  ): flatbuffers.Offset {
    Double.startDouble(builder);
    Double.addValue(builder, value);
    return Double.endDouble(builder);
  }

  unpack(): DoubleT {
    return new DoubleT(this.value());
  }

  unpackTo(_o: DoubleT): void {
    _o.value = this.value();
  }
}

export class DoubleT {
  constructor(public value: number = 0.0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Double.createDouble(builder, this.value);
  }
}
