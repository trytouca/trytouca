// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class String {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): String {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsString(bb: flatbuffers.ByteBuffer, obj?: String): String {
    return (obj || new String()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsString(
    bb: flatbuffers.ByteBuffer,
    obj?: String
  ): String {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new String()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  value(): string | null
  value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  value(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  static startString(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addValue(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, valueOffset, 0)
  }

  static endString(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createString(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    String.startString(builder)
    String.addValue(builder, valueOffset)
    return String.endString(builder)
  }

  unpack(): StringT {
    return new StringT(this.value())
  }

  unpackTo(_o: StringT): void {
    _o.value = this.value()
  }
}

export class StringT {
  constructor(public value: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const value = this.value !== null ? builder.createString(this.value!) : 0

    return String.createString(builder, value)
  }
}
