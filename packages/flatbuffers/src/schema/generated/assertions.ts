// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Assertions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Assertions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAssertions(
    bb: flatbuffers.ByteBuffer,
    obj?: Assertions
  ): Assertions {
    return (obj || new Assertions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsAssertions(
    bb: flatbuffers.ByteBuffer,
    obj?: Assertions
  ): Assertions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Assertions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static startAssertions(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static endAssertions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createAssertions(builder: flatbuffers.Builder): flatbuffers.Offset {
    Assertions.startAssertions(builder);
    return Assertions.endAssertions(builder);
  }

  unpack(): AssertionsT {
    return new AssertionsT();
  }

  unpackTo(_o: AssertionsT): void {}
}

export class AssertionsT {
  constructor() {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Assertions.createAssertions(builder);
  }
}
