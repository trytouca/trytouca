// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ResultType } from "./result-type";
import { TypeWrapper, TypeWrapperT } from "./type-wrapper";

export class Result {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Result {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsResult(bb: flatbuffers.ByteBuffer, obj?: Result): Result {
    return (obj || new Result()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsResult(
    bb: flatbuffers.ByteBuffer,
    obj?: Result
  ): Result {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Result()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  key(): string | null;
  key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  key(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  value(obj?: TypeWrapper): TypeWrapper | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new TypeWrapper()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null;
  }

  typ(): ResultType {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : ResultType.Check;
  }

  static startResult(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, keyOffset, 0);
  }

  static addValue(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, valueOffset, 0);
  }

  static addTyp(builder: flatbuffers.Builder, typ: ResultType) {
    builder.addFieldInt8(2, typ, ResultType.Check);
  }

  static endResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): ResultT {
    return new ResultT(
      this.key(),
      this.value() !== null ? this.value()!.unpack() : null,
      this.typ()
    );
  }

  unpackTo(_o: ResultT): void {
    _o.key = this.key();
    _o.value = this.value() !== null ? this.value()!.unpack() : null;
    _o.typ = this.typ();
  }
}

export class ResultT {
  constructor(
    public key: string | Uint8Array | null = null,
    public value: TypeWrapperT | null = null,
    public typ: ResultType = ResultType.Check
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const key = this.key !== null ? builder.createString(this.key!) : 0;
    const value = this.value !== null ? this.value!.pack(builder) : 0;

    Result.startResult(builder);
    Result.addKey(builder, key);
    Result.addValue(builder, value);
    Result.addTyp(builder, this.typ);

    return Result.endResult(builder);
  }
}
