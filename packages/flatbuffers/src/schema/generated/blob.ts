// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class Blob {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Blob {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsBlob(bb: flatbuffers.ByteBuffer, obj?: Blob): Blob {
    return (obj || new Blob()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsBlob(
    bb: flatbuffers.ByteBuffer,
    obj?: Blob
  ): Blob {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Blob()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  value(): string | null
  value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  value(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  static startBlob(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addValue(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, valueOffset, 0)
  }

  static endBlob(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createBlob(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Blob.startBlob(builder)
    Blob.addValue(builder, valueOffset)
    return Blob.endBlob(builder)
  }

  unpack(): BlobT {
    return new BlobT(this.value())
  }

  unpackTo(_o: BlobT): void {
    _o.value = this.value()
  }
}

export class BlobT {
  constructor(public value: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const value = this.value !== null ? builder.createString(this.value!) : 0

    return Blob.createBlob(builder, value)
  }
}
