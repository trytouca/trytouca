// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class Bool {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Bool {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {
    return (obj || new Bool()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsBool(
    bb: flatbuffers.ByteBuffer,
    obj?: Bool
  ): Bool {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Bool()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  value(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false
  }

  static startBool(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addValue(builder: flatbuffers.Builder, value: boolean) {
    builder.addFieldInt8(0, +value, +false)
  }

  static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createBool(
    builder: flatbuffers.Builder,
    value: boolean
  ): flatbuffers.Offset {
    Bool.startBool(builder)
    Bool.addValue(builder, value)
    return Bool.endBool(builder)
  }

  unpack(): BoolT {
    return new BoolT(this.value())
  }

  unpackTo(_o: BoolT): void {
    _o.value = this.value()
  }
}

export class BoolT {
  constructor(public value: boolean = false) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Bool.createBool(builder, this.value)
  }
}
