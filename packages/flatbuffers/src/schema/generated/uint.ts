// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class UInt {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): UInt {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUInt(bb: flatbuffers.ByteBuffer, obj?: UInt): UInt {
    return (obj || new UInt()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsUInt(
    bb: flatbuffers.ByteBuffer,
    obj?: UInt
  ): UInt {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new UInt()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  value(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
  }

  static startUInt(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addValue(builder: flatbuffers.Builder, value: bigint) {
    builder.addFieldInt64(0, value, BigInt("0"));
  }

  static endUInt(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createUInt(
    builder: flatbuffers.Builder,
    value: bigint
  ): flatbuffers.Offset {
    UInt.startUInt(builder);
    UInt.addValue(builder, value);
    return UInt.endUInt(builder);
  }

  unpack(): UIntT {
    return new UIntT(this.value());
  }

  unpackTo(_o: UIntT): void {
    _o.value = this.value();
  }
}

export class UIntT {
  constructor(public value: bigint = BigInt("0")) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return UInt.createUInt(builder, this.value);
  }
}
