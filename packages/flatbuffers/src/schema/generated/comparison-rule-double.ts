// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { ComparisonRuleMode } from './comparison-rule-mode'

export class ComparisonRuleDouble {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): ComparisonRuleDouble {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsComparisonRuleDouble(
    bb: flatbuffers.ByteBuffer,
    obj?: ComparisonRuleDouble
  ): ComparisonRuleDouble {
    return (obj || new ComparisonRuleDouble()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsComparisonRuleDouble(
    bb: flatbuffers.ByteBuffer,
    obj?: ComparisonRuleDouble
  ): ComparisonRuleDouble {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new ComparisonRuleDouble()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  mode(): ComparisonRuleMode {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.readUint8(this.bb_pos + offset)
      : ComparisonRuleMode.Absolute
  }

  max(): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null
  }

  min(): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null
  }

  percent(): boolean | null {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null
  }

  static startComparisonRuleDouble(builder: flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addMode(builder: flatbuffers.Builder, mode: ComparisonRuleMode) {
    builder.addFieldInt8(0, mode, ComparisonRuleMode.Absolute)
  }

  static addMax(builder: flatbuffers.Builder, max: number) {
    builder.addFieldFloat64(1, max, 0)
  }

  static addMin(builder: flatbuffers.Builder, min: number) {
    builder.addFieldFloat64(2, min, 0)
  }

  static addPercent(builder: flatbuffers.Builder, percent: boolean) {
    builder.addFieldInt8(3, +percent, 0)
  }

  static endComparisonRuleDouble(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createComparisonRuleDouble(
    builder: flatbuffers.Builder,
    mode: ComparisonRuleMode,
    max: number | null,
    min: number | null,
    percent: boolean | null
  ): flatbuffers.Offset {
    ComparisonRuleDouble.startComparisonRuleDouble(builder)
    ComparisonRuleDouble.addMode(builder, mode)
    if (max !== null) ComparisonRuleDouble.addMax(builder, max)
    if (min !== null) ComparisonRuleDouble.addMin(builder, min)
    if (percent !== null) ComparisonRuleDouble.addPercent(builder, percent)
    return ComparisonRuleDouble.endComparisonRuleDouble(builder)
  }

  unpack(): ComparisonRuleDoubleT {
    return new ComparisonRuleDoubleT(
      this.mode(),
      this.max(),
      this.min(),
      this.percent()
    )
  }

  unpackTo(_o: ComparisonRuleDoubleT): void {
    _o.mode = this.mode()
    _o.max = this.max()
    _o.min = this.min()
    _o.percent = this.percent()
  }
}

export class ComparisonRuleDoubleT {
  constructor(
    public mode: ComparisonRuleMode = ComparisonRuleMode.Absolute,
    public max: number | null = null,
    public min: number | null = null,
    public percent: boolean | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return ComparisonRuleDouble.createComparisonRuleDouble(
      builder,
      this.mode,
      this.max,
      this.min,
      this.percent
    )
  }
}
