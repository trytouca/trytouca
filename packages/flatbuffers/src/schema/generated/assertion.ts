// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Assertion {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Assertion {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAssertion(
    bb: flatbuffers.ByteBuffer,
    obj?: Assertion
  ): Assertion {
    return (obj || new Assertion()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsAssertion(
    bb: flatbuffers.ByteBuffer,
    obj?: Assertion
  ): Assertion {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Assertion()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static startAssertion(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static endAssertion(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): AssertionT {
    return new AssertionT();
  }

  unpackTo(_o: AssertionT): void {}
}

export class AssertionT {
  constructor() {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    Assertion.startAssertion(builder);
    return Assertion.endAssertion(builder);
  }
}
