// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { ComparisonMode } from './comparison-mode'

export class DoubleRule {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): DoubleRule {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsDoubleRule(
    bb: flatbuffers.ByteBuffer,
    obj?: DoubleRule
  ): DoubleRule {
    return (obj || new DoubleRule()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsDoubleRule(
    bb: flatbuffers.ByteBuffer,
    obj?: DoubleRule
  ): DoubleRule {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new DoubleRule()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  mode(): ComparisonMode {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.readUint8(this.bb_pos + offset)
      : ComparisonMode.Absolute
  }

  min(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0
  }

  max(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0
  }

  static startDoubleRule(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addMode(builder: flatbuffers.Builder, mode: ComparisonMode) {
    builder.addFieldInt8(0, mode, ComparisonMode.Absolute)
  }

  static addMin(builder: flatbuffers.Builder, min: number) {
    builder.addFieldFloat64(1, min, 0.0)
  }

  static addMax(builder: flatbuffers.Builder, max: number) {
    builder.addFieldFloat64(2, max, 0.0)
  }

  static endDoubleRule(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createDoubleRule(
    builder: flatbuffers.Builder,
    mode: ComparisonMode,
    min: number,
    max: number
  ): flatbuffers.Offset {
    DoubleRule.startDoubleRule(builder)
    DoubleRule.addMode(builder, mode)
    DoubleRule.addMin(builder, min)
    DoubleRule.addMax(builder, max)
    return DoubleRule.endDoubleRule(builder)
  }

  unpack(): DoubleRuleT {
    return new DoubleRuleT(this.mode(), this.min(), this.max())
  }

  unpackTo(_o: DoubleRuleT): void {
    _o.mode = this.mode()
    _o.min = this.min()
    _o.max = this.max()
  }
}

export class DoubleRuleT {
  constructor(
    public mode: ComparisonMode = ComparisonMode.Absolute,
    public min: number = 0.0,
    public max: number = 0.0
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return DoubleRule.createDoubleRule(builder, this.mode, this.min, this.max)
  }
}
