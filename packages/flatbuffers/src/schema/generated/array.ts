// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { TypeWrapper, TypeWrapperT } from "./type-wrapper";

export class Array {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Array {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsArray(bb: flatbuffers.ByteBuffer, obj?: Array): Array {
    return (obj || new Array()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsArray(
    bb: flatbuffers.ByteBuffer,
    obj?: Array
  ): Array {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Array()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  values(index: number, obj?: TypeWrapper): TypeWrapper | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new TypeWrapper()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  valuesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startArray(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addValues(
    builder: flatbuffers.Builder,
    valuesOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, valuesOffset, 0);
  }

  static createValuesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startValuesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endArray(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createArray(
    builder: flatbuffers.Builder,
    valuesOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Array.startArray(builder);
    Array.addValues(builder, valuesOffset);
    return Array.endArray(builder);
  }

  unpack(): ArrayT {
    return new ArrayT(
      this.bb!.createObjList(this.values.bind(this), this.valuesLength())
    );
  }

  unpackTo(_o: ArrayT): void {
    _o.values = this.bb!.createObjList(
      this.values.bind(this),
      this.valuesLength()
    );
  }
}

export class ArrayT {
  constructor(public values: TypeWrapperT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const values = Array.createValuesVector(
      builder,
      builder.createObjectOffsetList(this.values)
    );

    return Array.createArray(builder, values);
  }
}
