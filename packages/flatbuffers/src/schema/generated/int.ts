// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class Int {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Int {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {
    return (obj || new Int()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Int()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  value(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0')
  }

  static startInt(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addValue(builder: flatbuffers.Builder, value: bigint) {
    builder.addFieldInt64(0, value, BigInt('0'))
  }

  static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createInt(
    builder: flatbuffers.Builder,
    value: bigint
  ): flatbuffers.Offset {
    Int.startInt(builder)
    Int.addValue(builder, value)
    return Int.endInt(builder)
  }

  unpack(): IntT {
    return new IntT(this.value())
  }

  unpackTo(_o: IntT): void {
    _o.value = this.value()
  }
}

export class IntT {
  constructor(public value: bigint = BigInt('0')) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Int.createInt(builder, this.value)
  }
}
