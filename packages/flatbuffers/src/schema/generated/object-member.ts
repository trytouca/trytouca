// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { TypeWrapper, TypeWrapperT } from './type-wrapper'

export class ObjectMember {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): ObjectMember {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsObjectMember(
    bb: flatbuffers.ByteBuffer,
    obj?: ObjectMember
  ): ObjectMember {
    return (obj || new ObjectMember()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsObjectMember(
    bb: flatbuffers.ByteBuffer,
    obj?: ObjectMember
  ): ObjectMember {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new ObjectMember()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  name(): string | null
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  value(obj?: TypeWrapper): TypeWrapper | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? (obj || new TypeWrapper()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null
  }

  static startObjectMember(builder: flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0)
  }

  static addValue(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, valueOffset, 0)
  }

  static endObjectMember(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  unpack(): ObjectMemberT {
    return new ObjectMemberT(
      this.name(),
      this.value() !== null ? this.value()!.unpack() : null
    )
  }

  unpackTo(_o: ObjectMemberT): void {
    _o.name = this.name()
    _o.value = this.value() !== null ? this.value()!.unpack() : null
  }
}

export class ObjectMemberT {
  constructor(
    public name: string | Uint8Array | null = null,
    public value: TypeWrapperT | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const name = this.name !== null ? builder.createString(this.name!) : 0
    const value = this.value !== null ? this.value!.pack(builder) : 0

    ObjectMember.startObjectMember(builder)
    ObjectMember.addName(builder, name)
    ObjectMember.addValue(builder, value)

    return ObjectMember.endObjectMember(builder)
  }
}
