// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class MessageBuffer {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): MessageBuffer {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMessageBuffer(
    bb: flatbuffers.ByteBuffer,
    obj?: MessageBuffer
  ): MessageBuffer {
    return (obj || new MessageBuffer()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsMessageBuffer(
    bb: flatbuffers.ByteBuffer,
    obj?: MessageBuffer
  ): MessageBuffer {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new MessageBuffer()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  buf(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)
      : 0
  }

  bufLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  bufArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? new Uint8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset)
        )
      : null
  }

  static startMessageBuffer(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addBuf(builder: flatbuffers.Builder, bufOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, bufOffset, 0)
  }

  static createBufVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array
  ): flatbuffers.Offset {
    builder.startVector(1, data.length, 1)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!)
    }
    return builder.endVector()
  }

  static startBufVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1)
  }

  static endMessageBuffer(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createMessageBuffer(
    builder: flatbuffers.Builder,
    bufOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    MessageBuffer.startMessageBuffer(builder)
    MessageBuffer.addBuf(builder, bufOffset)
    return MessageBuffer.endMessageBuffer(builder)
  }

  unpack(): MessageBufferT {
    return new MessageBufferT(
      this.bb!.createScalarList(this.buf.bind(this), this.bufLength())
    )
  }

  unpackTo(_o: MessageBufferT): void {
    _o.buf = this.bb!.createScalarList(this.buf.bind(this), this.bufLength())
  }
}

export class MessageBufferT {
  constructor(public buf: number[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const buf = MessageBuffer.createBufVector(builder, this.buf)

    return MessageBuffer.createMessageBuffer(builder, buf)
  }
}
