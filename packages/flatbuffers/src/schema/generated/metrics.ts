// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { Metric, MetricT } from './metric'

export class Metrics {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Metrics {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMetrics(bb: flatbuffers.ByteBuffer, obj?: Metrics): Metrics {
    return (obj || new Metrics()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsMetrics(
    bb: flatbuffers.ByteBuffer,
    obj?: Metrics
  ): Metrics {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Metrics()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  entries(index: number, obj?: Metric): Metric | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? (obj || new Metric()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null
  }

  entriesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startMetrics(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addEntries(
    builder: flatbuffers.Builder,
    entriesOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, entriesOffset, 0)
  }

  static createEntriesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startEntriesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endMetrics(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createMetrics(
    builder: flatbuffers.Builder,
    entriesOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Metrics.startMetrics(builder)
    Metrics.addEntries(builder, entriesOffset)
    return Metrics.endMetrics(builder)
  }

  unpack(): MetricsT {
    return new MetricsT(
      this.bb!.createObjList(this.entries.bind(this), this.entriesLength())
    )
  }

  unpackTo(_o: MetricsT): void {
    _o.entries = this.bb!.createObjList(
      this.entries.bind(this),
      this.entriesLength()
    )
  }
}

export class MetricsT {
  constructor(public entries: MetricT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const entries = Metrics.createEntriesVector(
      builder,
      builder.createObjectOffsetList(this.entries)
    )

    return Metrics.createMetrics(builder, entries)
  }
}
