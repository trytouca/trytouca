// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class Metadata {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Metadata {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMetadata(
    bb: flatbuffers.ByteBuffer,
    obj?: Metadata
  ): Metadata {
    return (obj || new Metadata()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsMetadata(
    bb: flatbuffers.ByteBuffer,
    obj?: Metadata
  ): Metadata {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Metadata()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  testsuite(): string | null
  testsuite(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  testsuite(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  version(): string | null
  version(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  version(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  testcase(): string | null
  testcase(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  testcase(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  builtAt(): string | null
  builtAt(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  builtAt(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  teamslug(): string | null
  teamslug(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  teamslug(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 14)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  static startMetadata(builder: flatbuffers.Builder) {
    builder.startObject(6)
  }

  static addTestsuite(
    builder: flatbuffers.Builder,
    testsuiteOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, testsuiteOffset, 0)
  }

  static addVersion(
    builder: flatbuffers.Builder,
    versionOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, versionOffset, 0)
  }

  static addTestcase(
    builder: flatbuffers.Builder,
    testcaseOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(3, testcaseOffset, 0)
  }

  static addBuiltAt(
    builder: flatbuffers.Builder,
    builtAtOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(4, builtAtOffset, 0)
  }

  static addTeamslug(
    builder: flatbuffers.Builder,
    teamslugOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(5, teamslugOffset, 0)
  }

  static endMetadata(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createMetadata(
    builder: flatbuffers.Builder,
    testsuiteOffset: flatbuffers.Offset,
    versionOffset: flatbuffers.Offset,
    testcaseOffset: flatbuffers.Offset,
    builtAtOffset: flatbuffers.Offset,
    teamslugOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Metadata.startMetadata(builder)
    Metadata.addTestsuite(builder, testsuiteOffset)
    Metadata.addVersion(builder, versionOffset)
    Metadata.addTestcase(builder, testcaseOffset)
    Metadata.addBuiltAt(builder, builtAtOffset)
    Metadata.addTeamslug(builder, teamslugOffset)
    return Metadata.endMetadata(builder)
  }

  unpack(): MetadataT {
    return new MetadataT(
      this.testsuite(),
      this.version(),
      this.testcase(),
      this.builtAt(),
      this.teamslug()
    )
  }

  unpackTo(_o: MetadataT): void {
    _o.testsuite = this.testsuite()
    _o.version = this.version()
    _o.testcase = this.testcase()
    _o.builtAt = this.builtAt()
    _o.teamslug = this.teamslug()
  }
}

export class MetadataT {
  constructor(
    public testsuite: string | Uint8Array | null = null,
    public version: string | Uint8Array | null = null,
    public testcase: string | Uint8Array | null = null,
    public builtAt: string | Uint8Array | null = null,
    public teamslug: string | Uint8Array | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const testsuite =
      this.testsuite !== null ? builder.createString(this.testsuite!) : 0
    const version =
      this.version !== null ? builder.createString(this.version!) : 0
    const testcase =
      this.testcase !== null ? builder.createString(this.testcase!) : 0
    const builtAt =
      this.builtAt !== null ? builder.createString(this.builtAt!) : 0
    const teamslug =
      this.teamslug !== null ? builder.createString(this.teamslug!) : 0

    return Metadata.createMetadata(
      builder,
      testsuite,
      version,
      testcase,
      builtAt,
      teamslug
    )
  }
}
