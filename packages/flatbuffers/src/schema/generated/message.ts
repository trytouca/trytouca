// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Metadata, MetadataT } from "./metadata";
import { Metrics, MetricsT } from "./metrics";
import { Results, ResultsT } from "./results";

export class Message {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Message {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {
    return (obj || new Message()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsMessage(
    bb: flatbuffers.ByteBuffer,
    obj?: Message
  ): Message {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Message()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  metadata(obj?: Metadata): Metadata | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new Metadata()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null;
  }

  results(obj?: Results): Results | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new Results()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null;
  }

  metrics(obj?: Metrics): Metrics | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset
      ? (obj || new Metrics()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!
        )
      : null;
  }

  static startMessage(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addMetadata(
    builder: flatbuffers.Builder,
    metadataOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, metadataOffset, 0);
  }

  static addResults(
    builder: flatbuffers.Builder,
    resultsOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, resultsOffset, 0);
  }

  static addMetrics(
    builder: flatbuffers.Builder,
    metricsOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(3, metricsOffset, 0);
  }

  static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): MessageT {
    return new MessageT(
      this.metadata() !== null ? this.metadata()!.unpack() : null,
      this.results() !== null ? this.results()!.unpack() : null,
      this.metrics() !== null ? this.metrics()!.unpack() : null
    );
  }

  unpackTo(_o: MessageT): void {
    _o.metadata = this.metadata() !== null ? this.metadata()!.unpack() : null;
    _o.results = this.results() !== null ? this.results()!.unpack() : null;
    _o.metrics = this.metrics() !== null ? this.metrics()!.unpack() : null;
  }
}

export class MessageT {
  constructor(
    public metadata: MetadataT | null = null,
    public results: ResultsT | null = null,
    public metrics: MetricsT | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const metadata = this.metadata !== null ? this.metadata!.pack(builder) : 0;
    const results = this.results !== null ? this.results!.pack(builder) : 0;
    const metrics = this.metrics !== null ? this.metrics!.pack(builder) : 0;

    Message.startMessage(builder);
    Message.addMetadata(builder, metadata);
    Message.addResults(builder, results);
    Message.addMetrics(builder, metrics);

    return Message.endMessage(builder);
  }
}
