# Copyright 2022 Touca, Inc. Subject to Apache-2.0 License.

name: touca-build

on:
  push:
    branches:
      - main
      - "feature/**"

jobs:
  build-main-docs:
    name: build-main-docs
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        if: steps.changes.outputs.docs == 'true'
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=0 | cut -c 2-)"
          echo "::set-output name=release::${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')) }}"
      - name: authenticate to aws
        if: steps.changes.outputs.docs == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - uses: actions/setup-node@v2
        if: steps.changes.outputs.docs == 'true'
      - uses: actions/cache@v2
        if: steps.changes.outputs.docs == 'true'
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: build doc
        if: steps.changes.outputs.docs == 'true'
        run: |
          yarn --cwd=docs install
          yarn --cwd=docs build
      - name: push doc to aws
        if: steps.changes.outputs.docs == 'true' && steps.params.outputs.release == 'true'
        run: |
          aws s3 sync ./docs/build/ ${{ secrets.AWS_PROD_S3_BUCKET_WEB }}/docs/ --exclude "*.html" --exclude "*.xml" --cache-control public,max-age=31536000,immutable
          aws s3 sync ./docs/build/ ${{ secrets.AWS_PROD_S3_BUCKET_WEB }}/docs/ --exclude "*" --include "*.html" --include "*.xml" --cache-control no-cache

  lint-main-links:
    name: lint-main-links
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        if: steps.changes.outputs.links == 'true'

  build-sdk-cpp-local:
    name: build-sdk-cpp-local
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/cpp
    strategy:
      matrix:
        cxx: [g++-9, clang++-9]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - run: ./build.sh --with-tests --with-cli --with-examples
        if: steps.changes.outputs.sdk_cpp == 'true'
      - run: ./build.sh --test
        if: steps.changes.outputs.sdk_cpp == 'true'

  build-sdk-cpp-conan:
    name: build-sdk-cpp-conan
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/cpp
    strategy:
      matrix:
        cxx: [g++-9, clang++-9]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - uses: actions/setup-python@v1
        if: steps.changes.outputs.sdk_cpp == 'true'
      - name: cache conan
        if: steps.changes.outputs.sdk_cpp == 'true'
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.cxx }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.cxx }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: install conan
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: |
          pip install conan --no-cache-dir --upgrade
          conan profile new default --detect --force
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: build components
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: ./build.sh --with-tests --with-cli --with-examples
      - name: run unit tests
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: ./build.sh --test
      - name: create conan package
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: ./build.sh --package
      - name: push conan package
        if: steps.changes.outputs.sdk_cpp == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          conan remote add --force touca-cpp https://getweasel.jfrog.io/artifactory/api/conan/touca-cpp
          conan user -p ${{ secrets.JFROG_API_KEY }} -r touca-cpp ${{ secrets.JFROG_USERNAME }}
          conan upload "touca/1.5.2" --confirm --parallel -r touca-cpp --all

  build-sdk-cpp-docs:
    name: build-sdk-cpp-docs
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/cpp
    needs:
      - build-sdk-cpp-local
      - build-sdk-cpp-conan
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: authenticate to aws
        if: steps.changes.outputs.sdk_cpp == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - uses: actions/setup-python@v2
        if: steps.changes.outputs.sdk_cpp == 'true'
        with:
          python-version: 3.9
      - name: install dependencies
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: |
          sudo apt-get install doxygen
          python -m pip install --upgrade pip
          pip install --no-cache-dir --upgrade -r docs/sphinx/requirements.txt
      - name: generate docs
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: ./build.sh --docs
      - name: push docs to aws
        if: steps.changes.outputs.sdk_cpp == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          tar -zcf cpp-api-reference.tar.gz local/docs/html
          aws s3 cp cpp-api-reference.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/

  build-sdk-cpp-coverage:
    name: build-sdk-cpp-coverage
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/cpp
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build-sdk-cpp-local
      - build-sdk-cpp-conan
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: authenticate to aws
        if: steps.changes.outputs.sdk_cpp == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - name: install dependencies
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: pip install gcovr
      - name: generate coverage
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: ./build.sh --coverage
      - name: push coverage to aws
        if: steps.changes.outputs.sdk_cpp == 'true'
        run: |
          tar -zcf cpp-test-coverage.tar.gz ./local/coverage/html
          aws s3 cp cpp-test-coverage.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: upload coverage to codecov
        if: steps.changes.outputs.sdk_cpp == 'true'
        uses: codecov/codecov-action@v2
        env:
          OS: ${{ runner.os }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./local/coverage/coverage.xml
          env_vars: OS
          fail_ci_if_error: true

  build-sdk-java-local:
    name: build-sdk-java-local
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/java
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: authenticate to aws
        if: steps.changes.outputs.sdk_java == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key:
            ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - uses: gradle/wrapper-validation-action@v1
        if: steps.changes.outputs.sdk_java == 'true'
      - uses: actions/setup-java@v2
        if: steps.changes.outputs.sdk_java == 'true'
        with:
          distribution: "adopt"
          java-version: "8"
      - name: cache gradle dependencies
        if: steps.changes.outputs.sdk_java == 'true'
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key:
            ${{ runner.os }}-gradle-${{ env.cache-name }}-${{
            hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: build java sdk
        if: steps.changes.outputs.sdk_java == 'true'
        run: ./gradlew build
      - name: publish sdk to maven
        if: steps.changes.outputs.sdk_java == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GRADLE_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.GRADLE_SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GRADLE_SIGNING_PASSWORD }}
      - name: push docs to aws
        if: steps.changes.outputs.sdk_java == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          tar -zcf java-docs-external.tar.gz touca/build/docs/javadoc
          aws s3 cp java-docs-external.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: push coverage to aws
        if: steps.changes.outputs.sdk_java == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          tar -zcf java-test-coverage.tar.gz touca/build/reports/jacoco/test/html
          aws s3 cp java-test-coverage.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: cleanup gradle cache
        if: steps.changes.outputs.sdk_java == 'true'
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
      - name: upload coverage to codecov
        if: steps.changes.outputs.sdk_java == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: codecov/codecov-action@v1
        env:
          OS: ${{ runner.os }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./touca/build/reports/jacoco/test/jacocoTestReport.xml
          env_vars: OS
          fail_ci_if_error: true

  build-sdk-js-local:
    name: build-sdk-js-local
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/js
    strategy:
      matrix:
        node-version: [12, 14, 16]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: authenticate to aws
        if: steps.changes.outputs.sdk_js == 'true' && github.ref == 'refs/heads/main' && matrix.node-version == 14 && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - uses: actions/setup-node@v2
        if: steps.changes.outputs.sdk_js == 'true'
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v2
        if: steps.changes.outputs.sdk_js == 'true'
        env:
          CACHED_DEPENDENCY_PATHS: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/packages/**/node_modules
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: build js components
        if: steps.changes.outputs.sdk_js == 'true'
        run: |
          yarn install
          yarn build
          yarn test
      - name: lint source code
        if: steps.changes.outputs.sdk_js == 'true' && matrix.node-version == 14 && github.event_name == 'push'
        run: yarn lint
      - name: generate docs
        if: steps.changes.outputs.sdk_js == 'true' && matrix.node-version == 14 && github.event_name == 'push'
        run: yarn docs
      - name: push docs to aws
        if: steps.changes.outputs.sdk_js == 'true' && github.ref == 'refs/heads/main' && matrix.node-version == 14 && github.event_name == 'push'
        run: |
          tar -zcf js-node-docs-external.tar.gz local/docs
          aws s3 cp js-node-docs-external.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: push coverage to aws
        if: steps.changes.outputs.sdk_js == 'true' && github.ref == 'refs/heads/main' && matrix.node-version == 14 && github.event_name == 'push'
        run: |
          tar -zcf js-node-test-coverage.tar.gz packages/node/coverage/lcov-report
          aws s3 cp js-node-test-coverage.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: upload coverage to codecov
        if: steps.changes.outputs.sdk_js == 'true' && github.ref == 'refs/heads/main' && matrix.node-version == 14 && github.event_name == 'push'
        uses: codecov/codecov-action@v2
        env:
          OS: ${{ runner.os }}
          NODE: ${{ matrix.node-version }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/node/coverage/clover.xml
          env_vars: OS,NODE
          fail_ci_if_error: true

  build-sdk-python-local:
    name: build-sdk-python-local
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./clients/python
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, '3.10']
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: authenticate to aws
        if: steps.changes.outputs.sdk_python == 'true' && github.ref == 'refs/heads/main' && matrix.python-version == 3.9 && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET_ACTIONS_PUBLIC }}
          aws-region: us-east-2
      - uses: actions/setup-python@v2
        if: steps.changes.outputs.sdk_python == 'true'
        with:
          python-version: ${{ matrix.python-version }}
      - name: cache pip dependencies
        if: steps.changes.outputs.sdk_python == 'true'
        uses: actions/cache@v2
        env:
          cache-name: cache-pip-dependencies
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.python-version }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build
            ${{ runner.os }}-
      - name: install pip dependencies
        if: steps.changes.outputs.sdk_python == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: run unit tests
        if: steps.changes.outputs.sdk_python == 'true'
        run: |
          make test
      - name: generate docs
        if: steps.changes.outputs.sdk_python == 'true'
        run: |
          make docs
      - name: push docs to aws
        if: steps.changes.outputs.sdk_python == 'true' && github.ref == 'refs/heads/main' && matrix.python-version == 3.9 && github.event_name == 'push'
        run: |
          tar -zcf python-docs-external.tar.gz local/docs
          aws s3 cp python-docs-external.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: push coverage to aws
        if: steps.changes.outputs.sdk_python == 'true' && github.ref == 'refs/heads/main' && matrix.python-version == 3.9 && github.event_name == 'push'
        run: |
          tar -zcf python-test-coverage.tar.gz local/tests
          aws s3 cp python-test-coverage.tar.gz ${{ secrets.AWS_DEV_S3_BUCKET_BUILD }}/v1.4.0/
      - name: build package distributable
        if: steps.changes.outputs.sdk_python == 'true' && github.ref == 'refs/heads/main' && matrix.python-version == 3.9
        env:
          TWINE_NON_INTERACTIVE: true
        run: |
          pip install setuptools twine wheel
          python setup.py sdist bdist_wheel
          twine check dist/*
      - name: upload coverage to codecov
        if: steps.changes.outputs.sdk_python == 'true' && github.ref == 'refs/heads/main' && matrix.python-version == 3.9 && github.event_name == 'push'
        uses: codecov/codecov-action@v1
        env:
          OS: ${{ runner.os }}
          PYTHON: ${{ matrix.python-version }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./local/tests/coverage.xml
          env_vars: OS,PYTHON
          fail_ci_if_error: true

  build-examples-cpp:
    name: build-examples-cpp
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./examples/cpp
    strategy:
      matrix:
        cxx: [g++-9]
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - name: get version number
        if: steps.changes.outputs.examples_cpp == 'true'
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=4)"
      - name: build cpp examples
        if: steps.changes.outputs.examples_cpp == 'true'
        run: ./build.sh
      - name: run example cpp application
        if: steps.changes.outputs.examples_cpp == 'true' && github.ref == 'refs/heads/main'
        env:
          TOUCA_API_KEY: ${{ secrets.TOUCA_API_KEY }}
          TOUCA_API_URL: https://api.touca.io/@/examples/cpp
          TOUCA_TEST_VERSION: ${{ steps.params.outputs.version }}
        run: |
          mkdir -p ./local/results
          ./local/dist/bin/example_cpp_main_api

  build-examples-java:
    name: build-examples-java
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./examples/java
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - uses: actions/setup-java@v2
        if: steps.changes.outputs.examples_java == 'true'
        with:
          distribution: 'adopt'
          java-version: '8'
      - name: get version number
        if: steps.changes.outputs.examples_java == 'true'
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=4)"
      - uses: actions/cache@v2
        if: steps.changes.outputs.examples_java == 'true'
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ env.cache-name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: ./gradlew build
        if: steps.changes.outputs.examples_java == 'true'
      - name: run example java application
        if: steps.changes.outputs.examples_java == 'true' && github.ref == 'refs/heads/main'
        env:
          TOUCA_API_KEY: ${{ secrets.TOUCA_API_KEY }}
          TOUCA_API_URL: https://api.touca.io/@/examples/java
          TOUCA_TEST_VERSION: ${{ steps.params.outputs.version }}
        run: ./gradlew runExampleMain
      - name: cleanup gradle cache
        if: steps.changes.outputs.examples_java == 'true'
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  build-examples-js:
    name: build-examples-js
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./examples/javascript
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - uses: actions/setup-node@v2
        if: steps.changes.outputs.examples_js == 'true'
        with:
          node-version: 14
      - name: get version number
        if: steps.changes.outputs.examples_js == 'true'
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=4)"
      - uses: actions/cache@v2
        if: steps.changes.outputs.examples_js == 'true'
        with:
          path: |
            ${{ github.workspace }}/js/node_modules
            ${{ github.workspace }}/js/packages/**/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: build javascript examples
        if: steps.changes.outputs.examples_js == 'true'
        run: |
          yarn install
          yarn build
      - name: run javascript example application
        if: steps.changes.outputs.examples_js == 'true' && github.ref == 'refs/heads/main'
        env:
          TOUCA_API_KEY: ${{ secrets.TOUCA_API_KEY }}
          TOUCA_API_URL: https://api.touca.io/@/examples/javascript
          TOUCA_TEST_VERSION: ${{ steps.params.outputs.version }}
        run: |
          yarn --cwd=02_node_main_api test:touca

  build-examples-python:
    name: build-examples-python
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./examples/python
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/path-filters.yml
      - uses: actions/setup-python@v2
        if: steps.changes.outputs.examples_python == 'true'
        with:
          python-version: 3.9
      - name: get version number
        if: steps.changes.outputs.examples_python == 'true'
        id: params
        run: |
          git fetch --prune --unshallow --tags
          echo "::set-output name=version::$(git describe --tags --abbrev=4)"
      - name: run example python application
        if: steps.changes.outputs.examples_python == 'true' && github.ref == 'refs/heads/main'
        env:
          TOUCA_API_KEY: ${{ secrets.TOUCA_API_KEY }}
          TOUCA_API_URL: https://api.touca.io/@/examples/python
          TOUCA_TEST_VERSION: ${{ steps.params.outputs.version }}
        run: |
          pip install -r 02_python_main_api/requirements.txt
          cd 02_python_main_api && python students_test.py
